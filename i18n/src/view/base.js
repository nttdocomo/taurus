{
    "<p>A basic class</p>": "<p>一个基本的类</p>",
    "<p>Disabled the component</p>": "<p>禁用组件</p>",
    "<h1>Passing <code>true</code> will suppress the <code>disable</code> event from being fired.</h1>": "<h1>传入 <code>true</code> 将不触发<code>disable</code>事件。</h1>",
    "<p>Enable the component</p>": "<p>启用组件</p>",
    "<p>Passing <code>true</code> will suppress the <code>enable</code> event from being fired.</p>": "<p>传入 <code>true</code> 将不触发<code>enable</code>事件。</p>",
    "<p>Retrieves the <code>id</code> of this component. Will auto-generate an <code>id</code> if one has not already been set.</p>": "<p>重新获取组件的<code>id</code>。如果没有设置将会自动生成一个<code>id</code>。</p>",
    "<p>Gets the xtype for this component as registered with {@link Ext.ComponentManager}. For a list of all available\nxtypes, see the {@link Ext.Component} header. Example usage:</p>\n<pre class=\"prettyprint source\"><code>var t = new Ext.form.field.Text()\nalert(t.getXType());  // alerts 'textfield'</code></pre>": "<p>Gets the xtype for this component as registered with {@link Ext.ComponentManager}. For a list of all available\nxtypes, see the {@link Ext.Component} header. Example usage:</p>\n<pre class=\"prettyprint source\"><code>var t = new Ext.form.field.Text()\nalert(t.getXType());  // alerts 'textfield'</code></pre>",
    "<p>The xtype</p>": "<p>The xtype</p>",
    "<p>This is used to determine where to insert the 'html', 'contentEl' and 'items' in this component.</p>": "<p>This is used to determine where to insert the 'html', 'contentEl' and 'items' in this component.</p>",
    "<p>Method to determine whether this Component is currently disabled.</p>": "<p>判断组件当前是否被禁用的方法。</p>",
    "<p>the disabled state of this Component.</p>": "<p>该组件是否被禁用。</p>",
    "<p>Returns <code>true</code> if this component is visible.</p>": "<p>如果组件是可见的将返回<code>true</code>。</p>",
    "<p>Pass <code>true</code> to interrogate the visibility status of all parent Containers to\ndetermine whether this Component is truly visible to the user.</p>\n<p>Generally, to determine whether a Component is hidden, the no argument form is needed. For example when creating\ndynamically laid out UIs in a hidden Container before showing them.</p>": "<p>传入<code>true</code>去查询所有父容器的可见状态来决定该组件对于用户来说是否可见。</p><p>一般来说，决定一个组件是否被隐藏是不需要参数的。例如在显示一个隐藏的容器之前，在容器里动态创建布局UI时。</p>",
    "<p><code>true</code> if this component is visible, <code>false</code> otherwise.</p>": "<p>如果组件是可见的就是<code>true</code>，否则<code>false</code>。</p>",
    "<p>Allows addition of behavior to the disable operation.\nAfter calling the superclass's <code>onDisable</code>, the Component will be disabled.</p>": "<p>Allows addition of behavior to the disable operation.\nAfter calling the superclass's <code>onDisable</code>, the Component will be disabled.</p>",
    "<p>Sets the page XY position of the component. To set the left and top instead, use {@link #setPosition}.\nThis method fires the {@link #event-move} event.</p>": "<p>Sets the page XY position of the component. To set the left and top instead, use {@link #setPosition}.\nThis method fires the {@link #event-move} event.</p>",
    "<p>The new x position or an array of <code>[x,y]</code>.</p>": "<p>The new x position or an array of <code>[x,y]</code>.</p>",
    "<p>The new y position.</p>": "<p>The new y position.</p>",
    "<p>True to animate the Component into its new position. You may also pass an</p>": "<p>True to animate the Component into its new position. You may also pass an</p>",
    "<p>this</p>": "<p>this</p>",
    "<p>Sets the left and top of the component. To set the page XY position instead, use {@link Ext.Component#setPagePosition setPagePosition}. This\nmethod fires the {@link #event-move} event.</p>": "<p>Sets the left and top of the component. To set the page XY position instead, use {@link Ext.Component#setPagePosition setPagePosition}. This\nmethod fires the {@link #event-move} event.</p>",
    "<p>The new left, an array of <code>[x,y]</code>, or animation config object containing <code>x</code> and <code>y</code> properties.</p>": "<p>The new left, an array of <code>[x,y]</code>, or animation config object containing <code>x</code> and <code>y</code> properties.</p>",
    "<p>The new top.</p>": "<p>The new top.</p>",
    "<p>If <code>true</code>, the Component is <em>animated</em> into its new position. You may also pass an</p>": "<p>If <code>true</code>, the Component is <em>animated</em> into its new position. You may also pass an</p>",
    "<p>Convenience function to hide or show this component by Boolean.</p>": "<p>Convenience function to hide or show this component by Boolean.</p>",
    "<p><code>true</code> to show, <code>false</code> to hide.</p>": "<p><code>true</code> to show, <code>false</code> to hide.</p>",
    "<p>Shows this component by the specified {@link Ext.Component Component} or {@link Ext.dom.Element Element}.\nUsed when this component is {@link #floating}.</p>": "<p>Shows this component by the specified {@link Ext.Component Component} or {@link Ext.dom.Element Element}.\nUsed when this component is {@link #floating}.</p>",
    "<p>The {@link Ext.Component} or {@link Ext.dom.Element} to show the component by.</p>": "<p>The {@link Ext.Component} or {@link Ext.dom.Element} to show the component by.</p>",
    "<p>Alignment position as used by {@link Ext.util.Positionable#getAlignToXY}.\nDefaults to <code>{@link #defaultAlign}</code>. See {@link #alignTo} for possible values.</p>": "<p>Alignment position as used by {@link Ext.util.Positionable#getAlignToXY}.\nDefaults to <code>{@link #defaultAlign}</code>. See {@link #alignTo} for possible values.</p>",
    "<p>Alignment offsets as used by {@link Ext.util.Positionable#getAlignToXY}. See {@link #alignTo} for possible values.</p>": "<p>Alignment offsets as used by {@link Ext.util.Positionable#getAlignToXY}. See {@link #alignTo} for possible values.</p>",
    "<p>Method to change the scale of the button. See {@link #scale} for allowed configurations.</p>": "<p>Method to change the scale of the button. See {@link #scale} for allowed configurations.</p>",
    "<p>The scale to change to.</p>": "<p>The scale to change to.</p>",
    "<p>Method which adds a specified UI to the components element.</p>": "<p>Method which adds a specified UI to the components element.</p>",
    "<p>Method which adds a specified UI + <code>uiCls</code> to the components element. Can be overridden\nto add the UI to more than just the component's element.</p>": "<p>给组件元素添加一个特定的UI + <code>uiCls</code>。可以重写让其不只是给组件的元素添加UI。</p>",
    "<p>The UI class to add to the element.</p>": "<p>要给元素添加的UI class。</p>",
    "<p>Gets a named template instance for this class. See {@link Ext.XTemplate#getTpl}.</p>": "<p>Gets a named template instance for this class. See {@link Ext.XTemplate#getTpl}.</p>",
    "<p>The name of the property that holds the template.</p>": "<p>The name of the property that holds the template.</p>",
    "<p>The template, <code>null</code> if not found.</p>": "<p>The template, <code>null</code> if not found.</p>",
    "<p>Returns the value of {@link #itemId} assigned to this component, or when that\nis not set, returns the value of {@link #id}.</p>": "<p>Returns the value of {@link #itemId} assigned to this component, or when that\nis not set, returns the value of {@link #id}.</p>"
}